bicycles=['trek','cannondale','readlines','special']
print(bicycles)
#索引查询从0开始
print(bicycles[0].title())
#输入-1就会返回倒数第一个
print(bicycles[-1].title())
print(bicycles[-2].title())
#列表的增删改查
#在末尾增加元素
bicycles.append("ducati")
print(bicycles)
#列表中插入
bicycles.insert(0,"poshijie")
print(bicycles)
#在列表中删除元素使用del删除
del bicycles[0]
print(bicycles)
#删除列表未的元素：pop类似于栈结构的弹出
poped_bicycle=bicycles.pop()#删除的元素存储到一个变量
print(bicycles)
print(poped_bicycle)
#pop也可以指定下标
print(bicycles.pop(0))
print(bicycles)
#对于del和pop的何时使用，如果删除了得元素不需要在使用就使用del如果需要使用就用pop
#remove方法删除值
#如果列表中有多个值，只能删除一个值,如果需要全部修改，则需要循环
bicycles.remove('readlines')
print(bicycles)
#排序
integersintegers=[5,7,3,8,10,19]
integersintegers.sort()
print(integersintegers)
#降序
integersintegers.sort(reverse=True)
print(integersintegers)
#临时排序,不会影响原本的排序
print(sorted(integersintegers))
#临时降序
print(sorted(integersintegers,reverse=True))
print(integersintegers)
#反转列表
integersintegers.reverse()
print(integersintegers)
#获取列表长度
print(len(integersintegers))